@startuml
[-> ":CalculateBooleanCommand" : execute()
activate ":CalculateBooleanCommand"

":CalculateBooleanCommand" -> ":BooleanTemplate" : calculateOutput(index)
activate ":BooleanTemplate"

":BooleanTemplate" -> ":BinaryTree" : getRightIndex(index)
activate ":BinaryTree"

":BinaryTree" --> ":BooleanTemplate" : rightIndex
deactivate ":BinaryTree"

":BooleanTemplate" -> ":BinaryTree" : getLeftIndex(index)
activate ":BinaryTree"

":BinaryTree" --> ":BooleanTemplate" : leftIndex
deactivate ":BinaryTree"

":BooleanTemplate" -> ":BinaryTree" : isNullAtIndex(rightIndex)
activate ":BinaryTree"

":BinaryTree" --> ":BooleanTemplate" : isNullAtRight
deactivate ":BinaryTree"

":BooleanTemplate" -> ":BinaryTree" : getLeftIndex(index)
activate ":BinaryTree"

":BinaryTree" --> ":BooleanTemplate" : isNullAtLeft
deactivate ":BinaryTree"

":BooleanTemplate" -> ":BinaryTree": getT(index)
activate ":BinaryTree"

":BinaryTree" -> ":Gate" : arrayList.get(index)
activate ":Gate"

":Gate" --> ":BinaryTree" : gate
deactivate ":Gate"

":BinaryTree" --> ":BooleanTemplate": gate
deactivate ":BinaryTree"

alt !isNullAtLeft

":BooleanTemplate" -> ":Gate": setInput(calculateOutput(leftIndex))
activate ":Gate"

":Gate" --> ":BooleanTemplate"
deactivate ":Gate"

end

alt !isNullAtRight

":BooleanTemplate" -> ":Gate" : setSecondInput(calculateOutput(rightIndex))
activate ":Gate"

":Gate" --> ":BooleanTemplate"
deactivate ":Gate"

end

deactivate ":Gate"
deactivate ":Gate"

":BooleanTemplate" -> ":BinaryTree": getT(index)
activate ":BinaryTree"

":BinaryTree" -> ":Gate": arrayList.get(index)
activate ":Gate"

":Gate" --> ":BinaryTree" : gate
deactivate ":Gate"

":BinaryTree" --> ":BooleanTemplate" : gate
deactivate ":BinaryTree"

":BooleanTemplate" -> ":Gate" : gate.getOuput()
activate ":Gate"

":Gate" --> ":BooleanTemplate": output
deactivate ":Gate"

":BooleanTemplate" --> ":CalculateBooleanCommand": output
deactivate ":BooleanTemplate"

[<-- ":CalculateBooleanCommand": output
deactivate ":CalculateBooleanCommand"
@enduml